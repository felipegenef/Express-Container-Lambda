service: aws-node-http-api-project
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  vpc:
    securityGroupIds:
      - ${ssm:/poc-container-ms/LAMBDA_SG}
    subnetIds:
      - ${ssm:/poc-container-ms/LAMBDA_SUBNET}
  # Imagens de container
  ecr:
    images:
      image-courses:
        path: ./Ms-Courses
      image-books:
        path: ./Ms-Books
      image-docs:
        path: ./Ms-docs
  # Variáveis de Ambiente
  environment:
    DB_TYPE: sqlite
    EFS_ID: !Ref Efs
    ACCESS_POINT: !GetAtt EfsAccessPoint.Arn
  # Permissões IAM
  iamRoleStatements:
    - Effect: Allow
      Action:
        - elasticfilesystem:ClientMount
        - elasticfilesystem:ClientRootAccess
        - elasticfilesystem:ClientWrite
        - elasticfilesystem:DescribeMountTargets
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: "*"
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetWorkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"

# SQS da forma facil
plugins:
  - serverless-lift
constructs:
  duplicate-users:
    type: queue
    worker:
      dependsOn:
        - EfsAccessPoint
      # memorySize: 10000
      timeout: 900 #colocar o máximo para garantir a inserção de todos na fila
      environment:
        DUPLICATE_USERS_QUEUE_URL: ${construct:duplicate-users.queueUrl}
      image:
        name: image-books
        command:
          - src/SQS/UserDuplicate/index.handler
        entryPoint:
          - /function/entrypoint.sh
      fileSystemConfig:
        arn: !GetAtt EfsAccessPoint.Arn
        localMountPath: /mnt/efs

functions:
  ms-courses:
    dependsOn:
      - VpcEndpoint
      - EfsAccessPoint
    timeout: 30
    # memorySize: 10000
    environment:
      DATABASE_URL: ${ssm:/poc-container-ms/DATABASE_URL}
      VPC_ENDPOINT_URL: !Ref VpcEndpoint
      DUPLICATE_USERS_QUEUE_URL: ${construct:duplicate-users.queueUrl}
    image:
      name: image-courses
      command:
        - src/server.handler
      entryPoint:
        - /function/entrypoint.sh
    events:
      - httpApi:
          path: /course/{proxy+}
          method: ANY
          cors: true
    fileSystemConfig:
      arn: !GetAtt EfsAccessPoint.Arn
      localMountPath: /mnt/efs
  ms-books:
    dependsOn:
      - VpcEndpoint
      - EfsAccessPoint
    timeout: 30
    # memorySize: 10000
    environment:
      DATABASE_URL: ${ssm:/poc-container-ms/DATABASE_URL2}
    image:
      name: image-books
      command:
        - src/server.handler
      entryPoint:
        - /function/entrypoint.sh
    events:
      - httpApi:
          path: /book/{proxy+}
          method: ANY
          cors: true
    fileSystemConfig:
      arn: !GetAtt EfsAccessPoint.Arn
      localMountPath: /mnt/efs
  ms-docs:
    timeout: 30
    image:
      name: image-docs
      command:
        - src/server.handler
      entryPoint:
        - /function/entrypoint.sh
    events:
      - httpApi:
          path: /docs/{proxy+}
          method: ANY
          cors: true

#  Teste com efs

resources:
  Resources:
    Efs:
      Type: AWS::EFS::FileSystem
      Properties:
        FileSystemTags:
          - Key: Name
            Value: sqlite-volumes
        PerformanceMode: maxIO
        ThroughputMode: bursting
        LifecyclePolicies:
          - TransitionToIA: AFTER_30_DAYS
          - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
    EfsAccessPoint:
      Type: AWS::EFS::AccessPoint
      Properties:
        AccessPointTags:
          - Key: Name
            Value: volumes
        FileSystemId: !Ref Efs
        PosixUser:
          Gid: 808
          Uid: 808
          SecondaryGids:
            - "0"
        RootDirectory:
          CreationInfo:
            OwnerGid: 0
            OwnerUid: 0
            Permissions: "0777"
          Path: /efs/data
    EfsMountTarget:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref Efs
        SecurityGroups:
          - ${ssm:/poc-container-ms/LAMBDA_SG}
        SubnetId: ${ssm:/poc-container-ms/LAMBDA_SUBNET}
    VpcEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        SubnetIds:
          - ${ssm:/poc-container-ms/LAMBDA_SUBNET}
        SecurityGroupIds:
          - ${ssm:/poc-container-ms/LAMBDA_SG}
        VpcEndpointType: Interface
        VpcId: ${ssm:/poc-container-ms/VPC_ID}
        ServiceName: com.amazonaws.us-east-1.sqs
        PrivateDnsEnabled: true
